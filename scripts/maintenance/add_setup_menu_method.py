#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para agregar el m√©todo setup_menu faltante a MainWindow
"""

import os
import re
from datetime import datetime

def add_setup_menu_method():
    """Agrega el m√©todo setup_menu faltante a main_window.py"""
    
    # Ruta del archivo
    file_path = os.path.join('gui', 'main_window.py')
    
    if not os.path.exists(file_path):
        print(f"‚ùå Error: No se encontr√≥ el archivo {file_path}")
        return False
    
    # Crear backup
    backup_path = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    try:
        # Leer archivo original
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Crear backup
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"üìÅ Backup creado: {backup_path}")
        
        # M√©todo a agregar
        method_to_add = '''
    def setup_menu(self):
        """Configura el men√∫ principal de la aplicaci√≥n"""
        # Crear barra de men√∫
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # Men√∫ Archivo
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="üìÅ Archivo", menu=file_menu)
        file_menu.add_command(label="üìä Exportar a Excel", command=self.export_to_excel)
        file_menu.add_separator()
        file_menu.add_command(label="üö™ Cerrar Sesi√≥n", command=self.handle_logout)
        file_menu.add_command(label="‚ùå Salir", command=self.close)
        
        # Men√∫ Ver
        view_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="üëÅÔ∏è Ver", menu=view_menu)
        view_menu.add_command(label="üîÑ Actualizar", command=self.refresh_data)
        view_menu.add_command(label="üìà Estad√≠sticas", command=self.show_statistics)
        
        # Men√∫ Herramientas
        tools_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="üîß Herramientas", menu=tools_menu)
        tools_menu.add_command(label="‚öôÔ∏è Configuraci√≥n", command=self.show_config)
        tools_menu.add_command(label="üóëÔ∏è Limpiar Datos", command=self.clear_all_data)
        
        # Men√∫ Ayuda
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="‚ùì Ayuda", menu=help_menu)
        help_menu.add_command(label="‚ÑπÔ∏è Acerca de", command=self.show_about)
        help_menu.add_command(label="üìñ Manual", command=self.show_help)
    
    def export_to_excel(self):
        """Exporta los datos actuales a Excel"""
        try:
            # Implementar exportaci√≥n a Excel
            messagebox.showinfo("Exportar", "Funcionalidad de exportaci√≥n - Pr√≥ximamente disponible")
        except Exception as e:
            messagebox.showerror("Error", f"Error al exportar: {e}")
    
    def refresh_data(self):
        """Actualiza los datos mostrados"""
        try:
            self.load_observations()
            messagebox.showinfo("Actualizar", "Datos actualizados correctamente")
        except Exception as e:
            messagebox.showerror("Error", f"Error al actualizar: {e}")
    
    def show_statistics(self):
        """Muestra estad√≠sticas del sistema"""
        try:
            stats = self.db_manager.get_statistics()
            stats_text = f"""üìä Estad√≠sticas del Sistema
            
üìù Total de observaciones: {stats.get('total', 0)}
üè≠ M√°quinas registradas: {len(stats.get('por_maquina', {}))}
üë• Usuarios activos: {len(stats.get('por_usuario', {}))}
üìÖ √öltimo registro: {stats.get('ultima_fecha', 'N/A')}"""
            messagebox.showinfo("Estad√≠sticas", stats_text)
        except Exception as e:
            messagebox.showerror("Error", f"Error al obtener estad√≠sticas: {e}")
    
    def clear_all_data(self):
        """Limpia todos los datos (con confirmaci√≥n)"""
        result = messagebox.askyesno(
            "‚ö†Ô∏è Confirmar",
            "¬øEst√°s seguro de que quieres eliminar TODAS las observaciones?\n\n‚ö†Ô∏è Esta acci√≥n NO se puede deshacer."
        )
        if result:
            try:
                self.db_manager.clear_all_observations()
                self.load_observations()
                messagebox.showinfo("√âxito", "Todos los datos han sido eliminados")
            except Exception as e:
                messagebox.showerror("Error", f"Error al limpiar datos: {e}")
    
    def show_about(self):
        """Muestra informaci√≥n sobre la aplicaci√≥n"""
        from version import get_full_version_string
        about_text = f"""üìä Sistema de Observaciones de M√°quinas
        
üè∑Ô∏è Versi√≥n: {get_full_version_string()}
üë§ Usuario: {self.user_name}
üé≠ Rol: {self.get_role_display_name(self.user_role)}
üíæ Base de datos: SQLite

¬© 2024 - Sistema de Gesti√≥n Industrial"""
        messagebox.showinfo("Acerca de", about_text)
    
    def show_help(self):
        """Muestra ayuda del sistema"""
        help_text = """üìñ Manual de Usuario
        
üîπ Crear observaci√≥n: Bot√≥n 'Nueva Observaci√≥n'
üîπ Filtrar datos: Usar los campos de filtro
üîπ Exportar: Men√∫ Archivo > Exportar a Excel
üîπ Estad√≠sticas: Men√∫ Ver > Estad√≠sticas

üí° Tip: Usa Ctrl+F para b√∫squeda r√°pida"""
        messagebox.showinfo("Ayuda", help_text)
'''
        
        # Buscar el lugar donde insertar (despu√©s de show_user_profile)
        pattern = r'(def show_user_profile\(self\):.*?messagebox\.showinfo\("Perfil de Usuario", profile_info\))'
        match = re.search(pattern, content, re.DOTALL)
        
        if match:
            # Insertar despu√©s de show_user_profile
            insertion_point = match.end()
            new_content = content[:insertion_point] + method_to_add + content[insertion_point:]
            
            # Escribir archivo modificado
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            print("‚úÖ M√©todo setup_menu() y m√©todos relacionados agregados exitosamente")
            print(f"üìù Archivo modificado: {file_path}")
            return True
        else:
            print("‚ùå Error: No se encontr√≥ el m√©todo show_user_profile para insertar despu√©s")
            return False
            
    except Exception as e:
        print(f"‚ùå Error al procesar el archivo: {e}")
        return False

if __name__ == "__main__":
    print("üîß Agregando m√©todo setup_menu y m√©todos de men√∫ a MainWindow...")
    success = add_setup_menu_method()
    
    if success:
        print("\nüéâ ¬°Proceso completado! Los m√©todos de men√∫ han sido agregados.")
        print("\nüìã M√©todos agregados:")
        print("   ‚Ä¢ setup_menu() - Configura la barra de men√∫")
        print("   ‚Ä¢ export_to_excel() - Exportaci√≥n a Excel")
        print("   ‚Ä¢ refresh_data() - Actualizar datos")
        print("   ‚Ä¢ show_statistics() - Mostrar estad√≠sticas")
        print("   ‚Ä¢ clear_all_data() - Limpiar todos los datos")
        print("   ‚Ä¢ show_about() - Informaci√≥n de la app")
        print("   ‚Ä¢ show_help() - Manual de usuario")
    else:
        print("\n‚ùå El proceso fall√≥. Revisa los errores anteriores.")